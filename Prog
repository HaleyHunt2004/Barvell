// Velocity Tracker with Bar Path Linearity Analysis (adjustable view + pink star dot)

let video;
let dotX = null, dotY = null;
let positions = [];
let tracking = false;
let velocity = 0;
let liftType = "Squat";
let isPlaying = false;
let canvas;
let scaleFactor = 1;
let offsetX = 0;
let offsetY = 0;

function setup() {
  canvas = createCanvas(640, 480);
  textFont('Orbitron');
  background('#F8BBD0');
  textSize(16);

  video = createCapture(VIDEO);
  video.size(640, 480);
  video.hide();

  let uploadButton = createFileInput(handleFile);
  uploadButton.position(20, 20);

  let liftSelect = createSelect();
  liftSelect.position(160, 20);
  liftSelect.option("Squat");
  liftSelect.option("Bench");
  liftSelect.option("Deadlift");
  liftSelect.changed(() => liftType = liftSelect.value());

  let undoButton = createButton("Undo Dot");
  undoButton.position(240, 20);
  undoButton.mousePressed(() => {
    dotX = null;
    dotY = null;
    tracking = false;
    positions = [];
  });

  let playButton = createButton("Play");
  playButton.position(340, 20);
  playButton.mousePressed(() => {
    if (dotX !== null && dotY !== null && video.elt.readyState >= 2) {
      isPlaying = true;
      video.loop();
    }
  });

  let scaleSlider = createSlider(0.5, 2, 1, 0.01);
  scaleSlider.position(420, 20);
  scaleSlider.input(() => {
    scaleFactor = scaleSlider.value();
  });

  let offsetXSlider = createSlider(-320, 320, 0);
  offsetXSlider.position(20, 60);
  offsetXSlider.input(() => {
    offsetX = offsetXSlider.value();
  });

  let offsetYSlider = createSlider(-240, 240, 0);
  offsetYSlider.position(160, 60);
  offsetYSlider.input(() => {
    offsetY = offsetYSlider.value();
  });
}

function handleFile(file) {
  if (file.type === 'video') {
    video = createVideo([file.data], () => {
      video.loop();
    });
    video.hide();
  }
}

function draw() {
  background('#F8BBD0');
  push();
  translate(offsetX, offsetY);
  scale(scaleFactor);
  image(video, 0, 0);
  pop();

  if (isPlaying && dotX !== null && dotY !== null) {
    let noiseX = random(-1, 1);
    let noiseY = random(-1, 1);
    let currentX = dotX + noiseX;
    let currentY = dotY + noiseY;
    positions.push({ x: currentX, y: currentY, time: millis() });
    dotX = currentX;
    dotY = currentY;
    drawPath();
  } else if (positions.length > 0) {
    drawPath();
    calculateVelocity();
    showData();
  }

  if (dotX !== null && dotY !== null) {
    drawStar(dotX, dotY, 5, 10, 5, '#EC407A');
  }
}

function mousePressed() {
  if (!tracking && dotX === null && dotY === null) {
    dotX = mouseX;
    dotY = mouseY;
    tracking = true;
  }
}

function drawPath() {
  stroke('#F8BBD0');
  noFill();
  beginShape();
  for (let pos of positions) {
    vertex(pos.x, pos.y);
  }
  endShape();
  for (let pos of positions) {
    fill('#F8BBD0');
    noStroke();
    ellipse(pos.x, pos.y, 5, 5);
  }
}

function drawStar(x, y, radius1, radius2, npoints, col) {
  fill(col);
  noStroke();
  let angle = TWO_PI / npoints;
  let halfAngle = angle / 2.0;
  beginShape();
  for (let a = 0; a < TWO_PI; a += angle) {
    let sx = x + cos(a) * radius2;
    let sy = y + sin(a) * radius2;
    vertex(sx, sy);
    sx = x + cos(a + halfAngle) * radius1;
    sy = y + sin(a + halfAngle) * radius1;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}

function calculateVelocity() {
  if (positions.length < 2) return;
  let p1 = positions[0];
  let p2 = positions[positions.length - 1];
  let dt = (p2.time - p1.time) / 1000.0;
  velocity = dist(p1.x, p1.y, p2.x, p2.y) / dt;
}

function showData() {
  fill(0);
  textAlign(LEFT);
  textSize(14);
  text(`Lift: ${liftType}`, 20, height - 60);
  text(`Velocity: ${velocity.toFixed(2)} px/s`, 20, height - 40);
  const linearity = calcLinearity();
  const linearityColor = getLinearityColor(linearity);
  fill(linearityColor);
  text(`Bar Path Linearity: ${linearity.toFixed(2)}%`, 20, height - 20);
}

function calcLinearity() {
  if (positions.length < 2) return 100;
  let total = 0;
  let verticals = 0;
  for (let i = 1; i < positions.length; i++) {
    total += dist(positions[i].x, positions[i].y, positions[i - 1].x, positions[i - 1].y);
    verticals += abs(positions[i].y - positions[i - 1].y);
  }
  return (verticals / total) * 100;
}

function getLinearityColor(linearity) {
  if (linearity > 95) return color('#4CAF50');
  else if (linearity > 85) return color('#FFC107');
  else return color('#F44336');
}
